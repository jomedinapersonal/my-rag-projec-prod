name: CI Pipeline

permissions:
  contents: read
  actions: write  

on:
  push:
    branches:
      - develop

jobs:
  unit-testing:
    if: ${{ github.repository != 'Azure/GenAIOps-project-template' }}    
    runs-on: ubuntu-latest
    environment: dev
    needs: [setup-env-job]        
    steps:       
      - uses: actions/checkout@v4
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}     
      - name: Setup Python 
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt
      - name: Test with pytest
        env:
          PYTHONPATH: src
          PYTHONWARNINGS: ignore::DeprecationWarning,ignore::RemovedInMarshmallow4Warning
          AZURE_RESOURCE_GROUP: ${{needs.setup-env-job.outputs.AZURE_RESOURCE_GROUP}}
          AZURE_SUBSCRIPTION_ID: ${{needs.setup-env-job.outputs.AZURE_SUBSCRIPTION_ID}} 
          AZUREAI_PROJECT_NAME: ${{needs.setup-env-job.outputs.AZUREAI_PROJECT_NAME}}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
        run: pytest tests/ --doctest-modules --junitxml=junit/test-results-3.11.xml
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-3.11
          path: junit/test-results-3.11.xml
        if: always()

  code-standard-check: 
    runs-on: ubuntu-latest
    environment: dev
    needs: [setup-env-job]      
    steps:
      - name: Check code standards
        run: |
          echo "Run Pylint"

  flow-evaluation:
    needs: [setup-env-job, unit-testing, code-standard-check]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python 
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}           

      - name: AI-Based QA evaluation
        env: 
          AZURE_SUBSCRIPTION_ID: ${{needs.setup-env-job.outputs.AZURE_SUBSCRIPTION_ID}}      
          AZURE_LOCATION: ${{needs.setup-env-job.outputs.AZURE_LOCATION}}               
          AZURE_RESOURCE_GROUP: ${{needs.setup-env-job.outputs.AZURE_RESOURCE_GROUP}}               
          AZURE_OPENAI_NAME: ${{needs.setup-env-job.outputs.AZURE_OPENAI_NAME}}
          AZURE_OPENAI_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_ENDPOINT}}
          AZURE_SEARCH_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_SEARCH_ENDPOINT}}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT}}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZURE_OPENAI_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}} 
          AZURE_OPENAI_EMBEDDING_MODEL: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_MODEL}}
          AZURE_OPENAI_API_VERSION: ${{needs.setup-env-job.outputs.AZURE_OPENAI_API_VERSION}}
          AZUREAI_PROJECT_NAME: ${{needs.setup-env-job.outputs.AZUREAI_PROJECT_NAME}}           
          PREFIX: ${{ github.sha }} 
        run: |
          echo "Run AI-Based flow evaluation"
          required_envs=(
            "AZURE_SUBSCRIPTION_ID"
            "AZURE_LOCATION"
            "AZURE_RESOURCE_GROUP"
            "AZURE_OPENAI_NAME"
            "AZURE_OPENAI_ENDPOINT"
            "AZURE_SEARCH_ENDPOINT"
            "AZURE_OPENAI_EMBEDDING_DEPLOYMENT"
            "AZURE_OPENAI_CHAT_DEPLOYMENT"
            "AZURE_OPENAI_EMBEDDING_MODEL"
            "AZURE_OPENAI_API_VERSION"
            "AZUREAI_PROJECT_NAME"
            "PREFIX"
          )
          for env_var in "${required_envs[@]}"; do
            if [ -z "${!env_var}" ]; then
              echo Env variable "$env_var is needed but not set. Exiting."
              exit 1
            fi
          done          
          echo "AZURE_RESOURCE_GROUP=${AZURE_RESOURCE_GROUP}"
          echo "AZURE_OPENAI_NAME=${AZURE_OPENAI_NAME}"
          export AZURE_OPENAI_API_KEY=$(az cognitiveservices account keys list --resource-group ${AZURE_RESOURCE_GROUP} --name ${AZURE_OPENAI_NAME} --query "key1" --output tsv)
          export PYTHONPATH=./src:$PYTHONPATH
          python evaluations/qa_quality_eval.py
        shell: bash

      - name: Upload evaluation results
        uses: actions/upload-artifact@v4
        with:
            name: flow-eval-results
            path: qa_flow_quality_eval.json

  build-image:
    runs-on: ubuntu-latest
    needs: [setup-env-job, unit-testing, code-standard-check, flow-evaluation]    
    environment: dev 
    steps:
      - uses: actions/checkout@v4      
      - name: Setup Python 
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Promptflow CLI
        run: |
            python -m pip install --upgrade pip
            pip install promptflow --upgrade
            pf --version  

      - name: Install required dependencies
        run: | 
          pip cache purge
          pip install --upgrade pip setuptools
          pip install -r src/requirements.txt

      - name: Create flow docker files
        env:
          AZURE_SUBSCRIPTION_ID: ${{needs.setup-env-job.outputs.AZURE_SUBSCRIPTION_ID}} 
          AZURE_RESOURCE_GROUP: ${{needs.setup-env-job.outputs.AZURE_RESOURCE_GROUP}}   
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT}}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZUREAI_PROJECT_NAME: ${{needs.setup-env-job.outputs.AZUREAI_PROJECT_NAME}}                      
        run: |
              # reference: https://github.com/microsoft/promptflow/tree/main/examples/tutorials/flow-deploy/azure-app-service
              pf flow build --source src --output dist --format docker       

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
            name: build-artifacts
            path: dist/

      - name: Build Image
        env:
          AZURE_CONTAINER_REPOSITORY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REPOSITORY_NAME}}          
        run: |
            echo "✅ Building docker image..."
            path=dist
            image_tag=$AZURE_CONTAINER_REPOSITORY_NAME:develop-${{ github.sha }}
            echo "Change working directory to $path"
            cd "$path"
            docker build -t "$image_tag" .

      - name: Run Container
        env:
          AZURE_SUBSCRIPTION_ID: ${{needs.setup-env-job.outputs.AZURE_SUBSCRIPTION_ID}}
          AZURE_LOCATION: ${{needs.setup-env-job.outputs.AZURE_LOCATION}}
          AZURE_RESOURCE_GROUP: ${{needs.setup-env-job.outputs.AZURE_RESOURCE_GROUP}}      
          AZURE_SEARCH_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_SEARCH_ENDPOINT}}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_MODEL: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_MODEL}}
          AZURE_OPENAI_API_VERSION: ${{needs.setup-env-job.outputs.AZURE_OPENAI_API_VERSION}}
          AZURE_OPENAI_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_ENDPOINT}}
          PROMPTFLOW_WORKER_NUM: ${{needs.setup-env-job.outputs.PROMPTFLOW_WORKER_NUM}}
          PROMPTFLOW_SERVING_ENGINE: ${{needs.setup-env-job.outputs.PROMPTFLOW_SERVING_ENGINE}}
          AZURE_CONTAINER_REPOSITORY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REPOSITORY_NAME}}
          AZUREAI_PROJECT_NAME: ${{needs.setup-env-job.outputs.AZUREAI_PROJECT_NAME}}                          
        run: |
          echo "✅ Run image..."
          required_envs=(
            "AZURE_SUBSCRIPTION_ID"
            "AZURE_LOCATION"
            "AZURE_RESOURCE_GROUP"
            "AZURE_SEARCH_ENDPOINT"
            "AZURE_OPENAI_CHAT_DEPLOYMENT"
            "AZURE_OPENAI_EMBEDDING_DEPLOYMENT"
            "AZURE_OPENAI_EMBEDDING_MODEL"
            "AZURE_OPENAI_API_VERSION"
            "AZURE_OPENAI_ENDPOINT"
            "PROMPTFLOW_WORKER_NUM"
            "PROMPTFLOW_SERVING_ENGINE"
            "AZURE_CONTAINER_REPOSITORY_NAME"
          )
          for env_var in "${required_envs[@]}"; do
            if [ -z "${!env_var}" ]; then
              echo Env variable "$env_var is needed but not set. Exiting."
              exit 1
            fi
          done   
          image_tag=$AZURE_CONTAINER_REPOSITORY_NAME:develop-${{ github.sha }}
          docker run -d -p 8080:8080 -e PROMPTFLOW_SERVING_ENGINE=$PROMPTFLOW_SERVING_ENGINE -e PROMPTFLOW_WORKER_NUM=$PROMPTFLOW_WORKER_NUM $image_tag

      - name: Register Image
        env:
          AZURE_CONTAINER_REGISTRY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REGISTRY_NAME}}
          AZURE_CONTAINER_REPOSITORY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REPOSITORY_NAME}}  
        run: |
          image_tag=$AZURE_CONTAINER_REPOSITORY_NAME:develop-${{ github.sha }}
          full_registry_name="$AZURE_CONTAINER_REGISTRY_NAME.azurecr.io"
          echo "✅ Trying to login to $full_registry_name..."
          az acr login -n "$full_registry_name"

          acr_image_tag=$full_registry_name/$image_tag
          echo "✅ ACR image tag: $acr_image_tag"
          docker tag "$image_tag" "$acr_image_tag"

          echo "✅ Start pushing image...$acr_image_tag"
          docker push "$acr_image_tag"            
